// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Metadata.Internal;
using Microsoft.EntityFrameworkCore.Migrations;
using eStore.Data;

namespace eStore.Data.EF.Migrations
{
    [DbContext(typeof(eStoreContext))]
    [Migration("20180502192213_init")]
    partial class init
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.0-preview2-30571")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("eStore.Domain.CarrinhoContext.Carrinho", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid?>("UsuarioId");

                    b.Property<double>("ValorTotal");

                    b.HasKey("Id");

                    b.HasIndex("UsuarioId");

                    b.ToTable("Carrinho");
                });

            modelBuilder.Entity("eStore.Domain.CarrinhoContext.Item", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid>("CarrinhoId");

                    b.Property<Guid?>("ProdutoId");

                    b.Property<int>("Quantidade");

                    b.HasKey("Id");

                    b.HasIndex("CarrinhoId");

                    b.HasIndex("ProdutoId");

                    b.ToTable("CarrinhoItem");
                });

            modelBuilder.Entity("eStore.Domain.CarrinhoContext.Produto", b =>
                {
                    b.Property<Guid>("Id");

                    b.Property<string>("Nome")
                        .HasColumnName("Nome");

                    b.Property<double>("ValorUnitario")
                        .HasColumnName("ValorUnitario");

                    b.HasKey("Id");

                    b.ToTable("Produto");
                });

            modelBuilder.Entity("eStore.Domain.PagamentoContext.Pagamento", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("Forma");

                    b.Property<Guid?>("PedidoId");

                    b.Property<int>("QuantidadeParcelas");

                    b.Property<int>("Status");

                    b.Property<double>("Valor");

                    b.HasKey("Id");

                    b.HasIndex("PedidoId");

                    b.ToTable("Pagamento");
                });

            modelBuilder.Entity("eStore.Domain.PagamentoContext.Pedido", b =>
                {
                    b.Property<Guid>("Id");

                    b.Property<int>("Status")
                        .HasColumnName("Status");

                    b.Property<double>("ValorTotal")
                        .HasColumnName("ValorTotal");

                    b.HasKey("Id");

                    b.ToTable("Pedido");
                });

            modelBuilder.Entity("eStore.Domain.PedidoContext.Item", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid>("PedidoId");

                    b.Property<Guid?>("ProdutoId");

                    b.Property<int>("Quantidade");

                    b.HasKey("Id");

                    b.HasIndex("PedidoId");

                    b.HasIndex("ProdutoId");

                    b.ToTable("PedidoItem");
                });

            modelBuilder.Entity("eStore.Domain.PedidoContext.Pedido", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("Status")
                        .HasColumnName("Status");

                    b.Property<Guid?>("UsuarioId");

                    b.Property<double>("ValorTotal")
                        .HasColumnName("ValorTotal");

                    b.HasKey("Id");

                    b.HasIndex("UsuarioId");

                    b.ToTable("Pedido");
                });

            modelBuilder.Entity("eStore.Domain.PedidoContext.Produto", b =>
                {
                    b.Property<Guid>("Id");

                    b.Property<string>("Nome")
                        .HasColumnName("Nome");

                    b.Property<double>("ValorUnitario")
                        .HasColumnName("ValorUnitario");

                    b.HasKey("Id");

                    b.ToTable("Produto");
                });

            modelBuilder.Entity("eStore.Domain.PedidoContext.Usuario", b =>
                {
                    b.Property<Guid>("Id");

                    b.Property<string>("Email")
                        .HasColumnName("Email");

                    b.HasKey("Id");

                    b.ToTable("Usuario");
                });

            modelBuilder.Entity("eStore.Domain.ProdutoContext.Produto", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("Categoria");

                    b.Property<string>("Descricao");

                    b.Property<string>("Nome")
                        .HasColumnName("Nome");

                    b.Property<double>("ValorUnitario")
                        .HasColumnName("ValorUnitario");

                    b.HasKey("Id");

                    b.ToTable("Produto");
                });

            modelBuilder.Entity("eStore.Domain.UsuarioContext.Usuario", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Email")
                        .HasColumnName("Email");

                    b.Property<DateTime>("Nascimento");

                    b.Property<int>("Perfil");

                    b.Property<string>("Senha");

                    b.HasKey("Id");

                    b.ToTable("Usuario");
                });

            modelBuilder.Entity("eStore.Domain.CarrinhoContext.Carrinho", b =>
                {
                    b.HasOne("eStore.Domain.UsuarioContext.Usuario")
                        .WithMany()
                        .HasForeignKey("UsuarioId");
                });

            modelBuilder.Entity("eStore.Domain.CarrinhoContext.Item", b =>
                {
                    b.HasOne("eStore.Domain.CarrinhoContext.Carrinho")
                        .WithMany()
                        .HasForeignKey("CarrinhoId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("eStore.Domain.CarrinhoContext.Produto", "Produto")
                        .WithMany()
                        .HasForeignKey("ProdutoId");
                });

            modelBuilder.Entity("eStore.Domain.CarrinhoContext.Produto", b =>
                {
                    b.HasOne("eStore.Domain.ProdutoContext.Produto")
                        .WithOne()
                        .HasForeignKey("eStore.Domain.CarrinhoContext.Produto", "Id")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("eStore.Domain.PagamentoContext.Pagamento", b =>
                {
                    b.HasOne("eStore.Domain.PagamentoContext.Pedido", "Pedido")
                        .WithMany()
                        .HasForeignKey("PedidoId");

                    b.OwnsOne("eStore.Domain.Endereco", "EnderecoCobranca", b1 =>
                        {
                            b1.Property<Guid>("PagamentoId");

                            b1.Property<string>("Bairro")
                                .HasColumnName("Bairro");

                            b1.Property<string>("CEP")
                                .HasColumnName("CEP");

                            b1.Property<string>("Complemento")
                                .HasColumnName("Complemento");

                            b1.Property<string>("Logradouro")
                                .HasColumnName("Logradouro");

                            b1.Property<int>("Numero")
                                .HasColumnName("Numero");

                            b1.ToTable("Pagamento");

                            b1.HasOne("eStore.Domain.PagamentoContext.Pagamento")
                                .WithOne("EnderecoCobranca")
                                .HasForeignKey("eStore.Domain.Endereco", "PagamentoId")
                                .OnDelete(DeleteBehavior.Cascade);

                            b1.OwnsOne("eStore.Domain.CidadeUf", "Cidade", b2 =>
                                {
                                    b2.Property<Guid>("EnderecoPagamentoId");

                                    b2.Property<string>("Nome")
                                        .HasColumnName("Cidade");

                                    b2.Property<string>("UF")
                                        .HasColumnName("UF");

                                    b2.ToTable("Pagamento");

                                    b2.HasOne("eStore.Domain.Endereco")
                                        .WithOne("Cidade")
                                        .HasForeignKey("eStore.Domain.CidadeUf", "EnderecoPagamentoId")
                                        .OnDelete(DeleteBehavior.Cascade);
                                });
                        });
                });

            modelBuilder.Entity("eStore.Domain.PagamentoContext.Pedido", b =>
                {
                    b.HasOne("eStore.Domain.PedidoContext.Pedido")
                        .WithOne()
                        .HasForeignKey("eStore.Domain.PagamentoContext.Pedido", "Id")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("eStore.Domain.PedidoContext.Item", b =>
                {
                    b.HasOne("eStore.Domain.PedidoContext.Pedido")
                        .WithMany()
                        .HasForeignKey("PedidoId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("eStore.Domain.PedidoContext.Produto", "Produto")
                        .WithMany()
                        .HasForeignKey("ProdutoId");
                });

            modelBuilder.Entity("eStore.Domain.PedidoContext.Pedido", b =>
                {
                    b.HasOne("eStore.Domain.PedidoContext.Usuario", "Usuario")
                        .WithMany()
                        .HasForeignKey("UsuarioId");
                });

            modelBuilder.Entity("eStore.Domain.PedidoContext.Produto", b =>
                {
                    b.HasOne("eStore.Domain.ProdutoContext.Produto")
                        .WithOne()
                        .HasForeignKey("eStore.Domain.PedidoContext.Produto", "Id")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("eStore.Domain.PedidoContext.Usuario", b =>
                {
                    b.HasOne("eStore.Domain.UsuarioContext.Usuario")
                        .WithOne()
                        .HasForeignKey("eStore.Domain.PedidoContext.Usuario", "Id")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.OwnsOne("eStore.Domain.Endereco", "EnderecoResidencial", b1 =>
                        {
                            b1.Property<Guid>("UsuarioId");

                            b1.Property<string>("Bairro")
                                .HasColumnName("Bairro");

                            b1.Property<string>("CEP")
                                .HasColumnName("CEP");

                            b1.Property<string>("Complemento")
                                .HasColumnName("Complemento");

                            b1.Property<string>("Logradouro")
                                .HasColumnName("Logradouro");

                            b1.Property<int>("Numero")
                                .HasColumnName("Numero");

                            b1.ToTable("Usuario");

                            b1.HasOne("eStore.Domain.PedidoContext.Usuario")
                                .WithOne("EnderecoResidencial")
                                .HasForeignKey("eStore.Domain.Endereco", "UsuarioId")
                                .OnDelete(DeleteBehavior.Cascade);

                            b1.OwnsOne("eStore.Domain.CidadeUf", "Cidade", b2 =>
                                {
                                    b2.Property<Guid>("EnderecoUsuarioId");

                                    b2.Property<string>("Nome")
                                        .HasColumnName("Cidade");

                                    b2.Property<string>("UF")
                                        .HasColumnName("UF");

                                    b2.ToTable("Usuario");

                                    b2.HasOne("eStore.Domain.Endereco")
                                        .WithOne("Cidade")
                                        .HasForeignKey("eStore.Domain.CidadeUf", "EnderecoUsuarioId")
                                        .OnDelete(DeleteBehavior.Cascade);
                                });
                        });
                });

            modelBuilder.Entity("eStore.Domain.ProdutoContext.Produto", b =>
                {
                    b.OwnsOne("eStore.Domain.ProdutoContext.Dimensao", "Dimensao", b1 =>
                        {
                            b1.Property<Guid?>("ProdutoId");

                            b1.Property<double>("Altura")
                                .HasColumnName("Altura");

                            b1.Property<double>("Largura")
                                .HasColumnName("Largura");

                            b1.Property<double>("Peso")
                                .HasColumnName("Peso");

                            b1.Property<double>("Profundidade")
                                .HasColumnName("Profundidade");

                            b1.ToTable("Produto");

                            b1.HasOne("eStore.Domain.ProdutoContext.Produto")
                                .WithOne("Dimensao")
                                .HasForeignKey("eStore.Domain.ProdutoContext.Dimensao", "ProdutoId")
                                .OnDelete(DeleteBehavior.Cascade);
                        });
                });

            modelBuilder.Entity("eStore.Domain.UsuarioContext.Usuario", b =>
                {
                    b.OwnsOne("eStore.Domain.NomeCompleto", "Nome", b1 =>
                        {
                            b1.Property<Guid?>("UsuarioId");

                            b1.Property<string>("Nome")
                                .HasColumnName("Nome");

                            b1.Property<string>("Sobrenome")
                                .HasColumnName("Sobrenome");

                            b1.ToTable("Usuario");

                            b1.HasOne("eStore.Domain.UsuarioContext.Usuario")
                                .WithOne("Nome")
                                .HasForeignKey("eStore.Domain.NomeCompleto", "UsuarioId")
                                .OnDelete(DeleteBehavior.Cascade);
                        });

                    b.OwnsOne("eStore.Domain.Endereco", "EnderecoResidencial", b1 =>
                        {
                            b1.Property<Guid>("UsuarioId");

                            b1.Property<string>("Bairro")
                                .HasColumnName("Bairro");

                            b1.Property<string>("CEP")
                                .HasColumnName("CEP");

                            b1.Property<string>("Complemento")
                                .HasColumnName("Complemento");

                            b1.Property<string>("Logradouro")
                                .HasColumnName("Logradouro");

                            b1.Property<int>("Numero")
                                .HasColumnName("Numero");

                            b1.ToTable("Usuario");

                            b1.HasOne("eStore.Domain.UsuarioContext.Usuario")
                                .WithOne("EnderecoResidencial")
                                .HasForeignKey("eStore.Domain.Endereco", "UsuarioId")
                                .OnDelete(DeleteBehavior.Cascade);

                            b1.OwnsOne("eStore.Domain.CidadeUf", "Cidade", b2 =>
                                {
                                    b2.Property<Guid>("EnderecoUsuarioId");

                                    b2.Property<string>("Nome")
                                        .HasColumnName("Cidade");

                                    b2.Property<string>("UF")
                                        .HasColumnName("UF");

                                    b2.ToTable("Usuario");

                                    b2.HasOne("eStore.Domain.Endereco")
                                        .WithOne("Cidade")
                                        .HasForeignKey("eStore.Domain.CidadeUf", "EnderecoUsuarioId")
                                        .OnDelete(DeleteBehavior.Cascade);
                                });
                        });
                });
#pragma warning restore 612, 618
        }
    }
}
